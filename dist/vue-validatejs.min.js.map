{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///vue-validatejs.min.js","webpack:///webpack/bootstrap 9b38fc0c44bcaecffb44","webpack:///(webpack)/buildin/amd-define.js","webpack:///./src/vue-validate.js.vue","webpack:///vue-validate.js.vue","webpack:///./src/index.js","webpack:///./~/validate.js/validate.js","webpack:///./~/vue-loader/lib/component-normalizer.js","webpack:///./src/vue-validate.js.vue?e02b","webpack:///(webpack)/buildin/module.js"],"names":["root","factory","exports","module","define","amd","a","i","this","modules","__webpack_require__","moduleId","installedModules","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Error","Component","reduceObject","input","smallObject","validate","default","props","created","validateConfig","computed","errorMessageCollection","fieldValidation","propertyName","validation","model","format","VueValidateJs","undefined","_vueValidateJs","_vueValidateJs2","obj","attributes","constraints","options","v","extend","results","runValidations","some","r","isPromise","error","processValidationResults","slice","arguments","forEach","source","attr","version","major","minor","patch","metadata","toString","isEmpty","Promise","EMPTY_STRING_REGEXP","validatorName","validators","validator","validatorOptions","isDomElement","isJqueryElement","collectFormValues","getDeepObjectValue","result","push","attribute","globalOptions","errors","pruneEmptyErrors","expandMultipleErrors","convertErrorMessages","formatters","async","WrapErrors","wrapErrors","cleanAttributes","resolve","reject","waitForResults","then","err","single","fullMessages","reduce","memo","args","apply","isNumber","isNaN","isFunction","isInteger","isBoolean","isObject","isDate","Date","isDefined","isString","jquery","querySelectorAll","querySelector","document","HTMLElement","nodeType","nodeName","test","isArray","length","str","vals","replace","FORMAT_REGEXP","m0","m1","m2","String","prettify","parseFloat","Math","round","toFixed","map","join","toLowerCase","stringifyValue","isHash","contains","indexOf","unique","array","filter","el","index","forEachKeyInKeypath","keypath","callback","key","escape","form","j","inputs","option","values","item","getAttribute","sanitizeFormValue","type","checked","multiple","selected","_val","selectedIndex","trim","nullify","capitalize","toUpperCase","ret","msg","errorInfo","groupErrorsByAttribute","list","flattenErrorsToArray","self","whitelist","whitelistCreator","last","cleanRecursive","w","ow","exposeModule","warn","console","presence","allowEmpty","message","is","maximum","minimum","tokenizer","val","wrongLength","count","tooShort","tooLong","notValid","numericality","checks","greaterThan","greaterThanOrEqualTo","equalTo","lessThan","lessThanOrEqualTo","divisibleBy","strict","pattern","onlyInteger","RegExp","noStrings","notInteger","odd","notOdd","even","notEven","datetime","parse","earliest","NaN","latest","dateOnly","tooEarly","date","tooLate","match","flags","exec","inclusion","within","exclusion","email","PATTERN","equality","otherValue","comparator","v1","v2","url","schemes","allowLocal","regex","tld","detailed","flat","grouped","constraint","sort","rawScriptExports","compiledTemplate","injectStyles","scopeId","moduleIdentifier","esModule","scriptExports","render","staticRenderFns","_scopeId","hook","context","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","_registeredComponents","add","_ssrRegister","functional","existing","beforeCreate","h","concat","_vm","_h","$createElement","_c","_self","staticClass","_v","_s","_e","webpackPolyfill","deprecate","paths","children"],"mappings":"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","file":"vue-validatejs.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"dist/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 3);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = function() {\r\n\tthrow new Error(\"define cannot be used indirect\");\r\n};\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  __webpack_require__(2),\n  /* template */\n  __webpack_require__(6),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n//\n//\n//\n//\n//\n\n\nvar validate = __webpack_require__(4);\n\nfunction reduceObject(property, input) {\n    var smallObject = {};\n    smallObject[property] = input[property];\n    return smallObject;\n}\n\nexports.default = {\n    props: ['propertyName', 'model', 'validation', 'validateConfig'],\n    created: function created() {\n        if (this.validateConfig) this.validateConfig();\n    },\n    computed: {\n        errorMessageCollection: function errorMessageCollection() {\n            var fieldValidation = reduceObject(this.propertyName, this.validation);\n            return validate(this.model, fieldValidation, { format: 'flat' });\n        }\n    }\n};\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VueValidateJs = undefined;\n\nvar _vueValidateJs = __webpack_require__(1);\n\nvar _vueValidateJs2 = _interopRequireDefault(_vueValidateJs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.VueValidateJs = _vueValidateJs2.default;\nexports.default = _vueValidateJs2.default;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(module) {/*!\n * validate.js 0.12.0\n *\n * (c) 2013-2017 Nicklas Ansman, 2013 Wrapp\n * Validate.js may be freely distributed under the MIT license.\n * For all details and documentation:\n * http://validatejs.org/\n */\n\n(function(exports, module, define) {\n  \"use strict\";\n\n  // The main function that calls the validators specified by the constraints.\n  // The options are the following:\n  //   - format (string) - An option that controls how the returned value is formatted\n  //     * flat - Returns a flat array of just the error messages\n  //     * grouped - Returns the messages grouped by attribute (default)\n  //     * detailed - Returns an array of the raw validation data\n  //   - fullMessages (boolean) - If `true` (default) the attribute name is prepended to the error.\n  //\n  // Please note that the options are also passed to each validator.\n  var validate = function(attributes, constraints, options) {\n    options = v.extend({}, v.options, options);\n\n    var results = v.runValidations(attributes, constraints, options)\n      , attr\n      , validator;\n\n    if (results.some(function(r) { return v.isPromise(r.error); })) {\n      throw new Error(\"Use validate.async if you want support for promises\");\n    }\n    return validate.processValidationResults(results, options);\n  };\n\n  var v = validate;\n\n  // Copies over attributes from one or more sources to a single destination.\n  // Very much similar to underscore's extend.\n  // The first argument is the target object and the remaining arguments will be\n  // used as sources.\n  v.extend = function(obj) {\n    [].slice.call(arguments, 1).forEach(function(source) {\n      for (var attr in source) {\n        obj[attr] = source[attr];\n      }\n    });\n    return obj;\n  };\n\n  v.extend(validate, {\n    // This is the version of the library as a semver.\n    // The toString function will allow it to be coerced into a string\n    version: {\n      major: 0,\n      minor: 12,\n      patch: 0,\n      metadata: null,\n      toString: function() {\n        var version = v.format(\"%{major}.%{minor}.%{patch}\", v.version);\n        if (!v.isEmpty(v.version.metadata)) {\n          version += \"+\" + v.version.metadata;\n        }\n        return version;\n      }\n    },\n\n    // Below is the dependencies that are used in validate.js\n\n    // The constructor of the Promise implementation.\n    // If you are using Q.js, RSVP or any other A+ compatible implementation\n    // override this attribute to be the constructor of that promise.\n    // Since jQuery promises aren't A+ compatible they won't work.\n    Promise: typeof Promise !== \"undefined\" ? Promise : /* istanbul ignore next */ null,\n\n    EMPTY_STRING_REGEXP: /^\\s*$/,\n\n    // Runs the validators specified by the constraints object.\n    // Will return an array of the format:\n    //     [{attribute: \"<attribute name>\", error: \"<validation result>\"}, ...]\n    runValidations: function(attributes, constraints, options) {\n      var results = []\n        , attr\n        , validatorName\n        , value\n        , validators\n        , validator\n        , validatorOptions\n        , error;\n\n      if (v.isDomElement(attributes) || v.isJqueryElement(attributes)) {\n        attributes = v.collectFormValues(attributes);\n      }\n\n      // Loops through each constraints, finds the correct validator and run it.\n      for (attr in constraints) {\n        value = v.getDeepObjectValue(attributes, attr);\n        // This allows the constraints for an attribute to be a function.\n        // The function will be called with the value, attribute name, the complete dict of\n        // attributes as well as the options and constraints passed in.\n        // This is useful when you want to have different\n        // validations depending on the attribute value.\n        validators = v.result(constraints[attr], value, attributes, attr, options, constraints);\n\n        for (validatorName in validators) {\n          validator = v.validators[validatorName];\n\n          if (!validator) {\n            error = v.format(\"Unknown validator %{name}\", {name: validatorName});\n            throw new Error(error);\n          }\n\n          validatorOptions = validators[validatorName];\n          // This allows the options to be a function. The function will be\n          // called with the value, attribute name, the complete dict of\n          // attributes as well as the options and constraints passed in.\n          // This is useful when you want to have different\n          // validations depending on the attribute value.\n          validatorOptions = v.result(validatorOptions, value, attributes, attr, options, constraints);\n          if (!validatorOptions) {\n            continue;\n          }\n          results.push({\n            attribute: attr,\n            value: value,\n            validator: validatorName,\n            globalOptions: options,\n            attributes: attributes,\n            options: validatorOptions,\n            error: validator.call(validator,\n                value,\n                validatorOptions,\n                attr,\n                attributes,\n                options)\n          });\n        }\n      }\n\n      return results;\n    },\n\n    // Takes the output from runValidations and converts it to the correct\n    // output format.\n    processValidationResults: function(errors, options) {\n      errors = v.pruneEmptyErrors(errors, options);\n      errors = v.expandMultipleErrors(errors, options);\n      errors = v.convertErrorMessages(errors, options);\n\n      var format = options.format || \"grouped\";\n\n      if (typeof v.formatters[format] === 'function') {\n        errors = v.formatters[format](errors);\n      } else {\n        throw new Error(v.format(\"Unknown format %{format}\", options));\n      }\n\n      return v.isEmpty(errors) ? undefined : errors;\n    },\n\n    // Runs the validations with support for promises.\n    // This function will return a promise that is settled when all the\n    // validation promises have been completed.\n    // It can be called even if no validations returned a promise.\n    async: function(attributes, constraints, options) {\n      options = v.extend({}, v.async.options, options);\n\n      var WrapErrors = options.wrapErrors || function(errors) {\n        return errors;\n      };\n\n      // Removes unknown attributes\n      if (options.cleanAttributes !== false) {\n        attributes = v.cleanAttributes(attributes, constraints);\n      }\n\n      var results = v.runValidations(attributes, constraints, options);\n\n      return new v.Promise(function(resolve, reject) {\n        v.waitForResults(results).then(function() {\n          var errors = v.processValidationResults(results, options);\n          if (errors) {\n            reject(new WrapErrors(errors, options, attributes, constraints));\n          } else {\n            resolve(attributes);\n          }\n        }, function(err) {\n          reject(err);\n        });\n      });\n    },\n\n    single: function(value, constraints, options) {\n      options = v.extend({}, v.single.options, options, {\n        format: \"flat\",\n        fullMessages: false\n      });\n      return v({single: value}, {single: constraints}, options);\n    },\n\n    // Returns a promise that is resolved when all promises in the results array\n    // are settled. The promise returned from this function is always resolved,\n    // never rejected.\n    // This function modifies the input argument, it replaces the promises\n    // with the value returned from the promise.\n    waitForResults: function(results) {\n      // Create a sequence of all the results starting with a resolved promise.\n      return results.reduce(function(memo, result) {\n        // If this result isn't a promise skip it in the sequence.\n        if (!v.isPromise(result.error)) {\n          return memo;\n        }\n\n        return memo.then(function() {\n          return result.error.then(function(error) {\n            result.error = error || null;\n          });\n        });\n      }, new v.Promise(function(r) { r(); })); // A resolved promise\n    },\n\n    // If the given argument is a call: function the and: function return the value\n    // otherwise just return the value. Additional arguments will be passed as\n    // arguments to the function.\n    // Example:\n    // ```\n    // result('foo') // 'foo'\n    // result(Math.max, 1, 2) // 2\n    // ```\n    result: function(value) {\n      var args = [].slice.call(arguments, 1);\n      if (typeof value === 'function') {\n        value = value.apply(null, args);\n      }\n      return value;\n    },\n\n    // Checks if the value is a number. This function does not consider NaN a\n    // number like many other `isNumber` functions do.\n    isNumber: function(value) {\n      return typeof value === 'number' && !isNaN(value);\n    },\n\n    // Returns false if the object is not a function\n    isFunction: function(value) {\n      return typeof value === 'function';\n    },\n\n    // A simple check to verify that the value is an integer. Uses `isNumber`\n    // and a simple modulo check.\n    isInteger: function(value) {\n      return v.isNumber(value) && value % 1 === 0;\n    },\n\n    // Checks if the value is a boolean\n    isBoolean: function(value) {\n      return typeof value === 'boolean';\n    },\n\n    // Uses the `Object` function to check if the given argument is an object.\n    isObject: function(obj) {\n      return obj === Object(obj);\n    },\n\n    // Simply checks if the object is an instance of a date\n    isDate: function(obj) {\n      return obj instanceof Date;\n    },\n\n    // Returns false if the object is `null` of `undefined`\n    isDefined: function(obj) {\n      return obj !== null && obj !== undefined;\n    },\n\n    // Checks if the given argument is a promise. Anything with a `then`\n    // function is considered a promise.\n    isPromise: function(p) {\n      return !!p && v.isFunction(p.then);\n    },\n\n    isJqueryElement: function(o) {\n      return o && v.isString(o.jquery);\n    },\n\n    isDomElement: function(o) {\n      if (!o) {\n        return false;\n      }\n\n      if (!o.querySelectorAll || !o.querySelector) {\n        return false;\n      }\n\n      if (v.isObject(document) && o === document) {\n        return true;\n      }\n\n      // http://stackoverflow.com/a/384380/699304\n      /* istanbul ignore else */\n      if (typeof HTMLElement === \"object\") {\n        return o instanceof HTMLElement;\n      } else {\n        return o &&\n          typeof o === \"object\" &&\n          o !== null &&\n          o.nodeType === 1 &&\n          typeof o.nodeName === \"string\";\n      }\n    },\n\n    isEmpty: function(value) {\n      var attr;\n\n      // Null and undefined are empty\n      if (!v.isDefined(value)) {\n        return true;\n      }\n\n      // functions are non empty\n      if (v.isFunction(value)) {\n        return false;\n      }\n\n      // Whitespace only strings are empty\n      if (v.isString(value)) {\n        return v.EMPTY_STRING_REGEXP.test(value);\n      }\n\n      // For arrays we use the length property\n      if (v.isArray(value)) {\n        return value.length === 0;\n      }\n\n      // Dates have no attributes but aren't empty\n      if (v.isDate(value)) {\n        return false;\n      }\n\n      // If we find at least one property we consider it non empty\n      if (v.isObject(value)) {\n        for (attr in value) {\n          return false;\n        }\n        return true;\n      }\n\n      return false;\n    },\n\n    // Formats the specified strings with the given values like so:\n    // ```\n    // format(\"Foo: %{foo}\", {foo: \"bar\"}) // \"Foo bar\"\n    // ```\n    // If you want to write %{...} without having it replaced simply\n    // prefix it with % like this `Foo: %%{foo}` and it will be returned\n    // as `\"Foo: %{foo}\"`\n    format: v.extend(function(str, vals) {\n      if (!v.isString(str)) {\n        return str;\n      }\n      return str.replace(v.format.FORMAT_REGEXP, function(m0, m1, m2) {\n        if (m1 === '%') {\n          return \"%{\" + m2 + \"}\";\n        } else {\n          return String(vals[m2]);\n        }\n      });\n    }, {\n      // Finds %{key} style patterns in the given string\n      FORMAT_REGEXP: /(%?)%\\{([^\\}]+)\\}/g\n    }),\n\n    // \"Prettifies\" the given string.\n    // Prettifying means replacing [.\\_-] with spaces as well as splitting\n    // camel case words.\n    prettify: function(str) {\n      if (v.isNumber(str)) {\n        // If there are more than 2 decimals round it to two\n        if ((str * 100) % 1 === 0) {\n          return \"\" + str;\n        } else {\n          return parseFloat(Math.round(str * 100) / 100).toFixed(2);\n        }\n      }\n\n      if (v.isArray(str)) {\n        return str.map(function(s) { return v.prettify(s); }).join(\", \");\n      }\n\n      if (v.isObject(str)) {\n        return str.toString();\n      }\n\n      // Ensure the string is actually a string\n      str = \"\" + str;\n\n      return str\n        // Splits keys separated by periods\n        .replace(/([^\\s])\\.([^\\s])/g, '$1 $2')\n        // Removes backslashes\n        .replace(/\\\\+/g, '')\n        // Replaces - and - with space\n        .replace(/[_-]/g, ' ')\n        // Splits camel cased words\n        .replace(/([a-z])([A-Z])/g, function(m0, m1, m2) {\n          return \"\" + m1 + \" \" + m2.toLowerCase();\n        })\n        .toLowerCase();\n    },\n\n    stringifyValue: function(value, options) {\n      var prettify = options && options.prettify || v.prettify;\n      return prettify(value);\n    },\n\n    isString: function(value) {\n      return typeof value === 'string';\n    },\n\n    isArray: function(value) {\n      return {}.toString.call(value) === '[object Array]';\n    },\n\n    // Checks if the object is a hash, which is equivalent to an object that\n    // is neither an array nor a function.\n    isHash: function(value) {\n      return v.isObject(value) && !v.isArray(value) && !v.isFunction(value);\n    },\n\n    contains: function(obj, value) {\n      if (!v.isDefined(obj)) {\n        return false;\n      }\n      if (v.isArray(obj)) {\n        return obj.indexOf(value) !== -1;\n      }\n      return value in obj;\n    },\n\n    unique: function(array) {\n      if (!v.isArray(array)) {\n        return array;\n      }\n      return array.filter(function(el, index, array) {\n        return array.indexOf(el) == index;\n      });\n    },\n\n    forEachKeyInKeypath: function(object, keypath, callback) {\n      if (!v.isString(keypath)) {\n        return undefined;\n      }\n\n      var key = \"\"\n        , i\n        , escape = false;\n\n      for (i = 0; i < keypath.length; ++i) {\n        switch (keypath[i]) {\n          case '.':\n            if (escape) {\n              escape = false;\n              key += '.';\n            } else {\n              object = callback(object, key, false);\n              key = \"\";\n            }\n            break;\n\n          case '\\\\':\n            if (escape) {\n              escape = false;\n              key += '\\\\';\n            } else {\n              escape = true;\n            }\n            break;\n\n          default:\n            escape = false;\n            key += keypath[i];\n            break;\n        }\n      }\n\n      return callback(object, key, true);\n    },\n\n    getDeepObjectValue: function(obj, keypath) {\n      if (!v.isObject(obj)) {\n        return undefined;\n      }\n\n      return v.forEachKeyInKeypath(obj, keypath, function(obj, key) {\n        if (v.isObject(obj)) {\n          return obj[key];\n        }\n      });\n    },\n\n    // This returns an object with all the values of the form.\n    // It uses the input name as key and the value as value\n    // So for example this:\n    // <input type=\"text\" name=\"email\" value=\"foo@bar.com\" />\n    // would return:\n    // {email: \"foo@bar.com\"}\n    collectFormValues: function(form, options) {\n      var values = {}\n        , i\n        , j\n        , input\n        , inputs\n        , option\n        , value;\n\n      if (v.isJqueryElement(form)) {\n        form = form[0];\n      }\n\n      if (!form) {\n        return values;\n      }\n\n      options = options || {};\n\n      inputs = form.querySelectorAll(\"input[name], textarea[name]\");\n      for (i = 0; i < inputs.length; ++i) {\n        input = inputs.item(i);\n\n        if (v.isDefined(input.getAttribute(\"data-ignored\"))) {\n          continue;\n        }\n\n        name = input.name.replace(/\\./g, \"\\\\\\\\.\");\n        value = v.sanitizeFormValue(input.value, options);\n        if (input.type === \"number\") {\n          value = value ? +value : null;\n        } else if (input.type === \"checkbox\") {\n          if (input.attributes.value) {\n            if (!input.checked) {\n              value = values[name] || null;\n            }\n          } else {\n            value = input.checked;\n          }\n        } else if (input.type === \"radio\") {\n          if (!input.checked) {\n            value = values[name] || null;\n          }\n        }\n        values[name] = value;\n      }\n\n      inputs = form.querySelectorAll(\"select[name]\");\n      for (i = 0; i < inputs.length; ++i) {\n        input = inputs.item(i);\n        if (v.isDefined(input.getAttribute(\"data-ignored\"))) {\n          continue;\n        }\n\n        if (input.multiple) {\n          value = [];\n          for (j in input.options) {\n            option = input.options[j];\n             if (option && option.selected) {\n              value.push(v.sanitizeFormValue(option.value, options));\n            }\n          }\n        } else {\n          var _val = typeof input.options[input.selectedIndex] !== 'undefined' ? input.options[input.selectedIndex].value : '';\n          value = v.sanitizeFormValue(_val, options);\n        }\n        values[input.name] = value;\n      }\n\n      return values;\n    },\n\n    sanitizeFormValue: function(value, options) {\n      if (options.trim && v.isString(value)) {\n        value = value.trim();\n      }\n\n      if (options.nullify !== false && value === \"\") {\n        return null;\n      }\n      return value;\n    },\n\n    capitalize: function(str) {\n      if (!v.isString(str)) {\n        return str;\n      }\n      return str[0].toUpperCase() + str.slice(1);\n    },\n\n    // Remove all errors who's error attribute is empty (null or undefined)\n    pruneEmptyErrors: function(errors) {\n      return errors.filter(function(error) {\n        return !v.isEmpty(error.error);\n      });\n    },\n\n    // In\n    // [{error: [\"err1\", \"err2\"], ...}]\n    // Out\n    // [{error: \"err1\", ...}, {error: \"err2\", ...}]\n    //\n    // All attributes in an error with multiple messages are duplicated\n    // when expanding the errors.\n    expandMultipleErrors: function(errors) {\n      var ret = [];\n      errors.forEach(function(error) {\n        // Removes errors without a message\n        if (v.isArray(error.error)) {\n          error.error.forEach(function(msg) {\n            ret.push(v.extend({}, error, {error: msg}));\n          });\n        } else {\n          ret.push(error);\n        }\n      });\n      return ret;\n    },\n\n    // Converts the error mesages by prepending the attribute name unless the\n    // message is prefixed by ^\n    convertErrorMessages: function(errors, options) {\n      options = options || {};\n\n      var ret = []\n        , prettify = options.prettify || v.prettify;\n      errors.forEach(function(errorInfo) {\n        var error = v.result(errorInfo.error,\n            errorInfo.value,\n            errorInfo.attribute,\n            errorInfo.options,\n            errorInfo.attributes,\n            errorInfo.globalOptions);\n\n        if (!v.isString(error)) {\n          ret.push(errorInfo);\n          return;\n        }\n\n        if (error[0] === '^') {\n          error = error.slice(1);\n        } else if (options.fullMessages !== false) {\n          error = v.capitalize(prettify(errorInfo.attribute)) + \" \" + error;\n        }\n        error = error.replace(/\\\\\\^/g, \"^\");\n        error = v.format(error, {\n          value: v.stringifyValue(errorInfo.value, options)\n        });\n        ret.push(v.extend({}, errorInfo, {error: error}));\n      });\n      return ret;\n    },\n\n    // In:\n    // [{attribute: \"<attributeName>\", ...}]\n    // Out:\n    // {\"<attributeName>\": [{attribute: \"<attributeName>\", ...}]}\n    groupErrorsByAttribute: function(errors) {\n      var ret = {};\n      errors.forEach(function(error) {\n        var list = ret[error.attribute];\n        if (list) {\n          list.push(error);\n        } else {\n          ret[error.attribute] = [error];\n        }\n      });\n      return ret;\n    },\n\n    // In:\n    // [{error: \"<message 1>\", ...}, {error: \"<message 2>\", ...}]\n    // Out:\n    // [\"<message 1>\", \"<message 2>\"]\n    flattenErrorsToArray: function(errors) {\n      return errors\n        .map(function(error) { return error.error; })\n        .filter(function(value, index, self) {\n          return self.indexOf(value) === index;\n        });\n    },\n\n    cleanAttributes: function(attributes, whitelist) {\n      function whitelistCreator(obj, key, last) {\n        if (v.isObject(obj[key])) {\n          return obj[key];\n        }\n        return (obj[key] = last ? true : {});\n      }\n\n      function buildObjectWhitelist(whitelist) {\n        var ow = {}\n          , lastObject\n          , attr;\n        for (attr in whitelist) {\n          if (!whitelist[attr]) {\n            continue;\n          }\n          v.forEachKeyInKeypath(ow, attr, whitelistCreator);\n        }\n        return ow;\n      }\n\n      function cleanRecursive(attributes, whitelist) {\n        if (!v.isObject(attributes)) {\n          return attributes;\n        }\n\n        var ret = v.extend({}, attributes)\n          , w\n          , attribute;\n\n        for (attribute in attributes) {\n          w = whitelist[attribute];\n\n          if (v.isObject(w)) {\n            ret[attribute] = cleanRecursive(ret[attribute], w);\n          } else if (!w) {\n            delete ret[attribute];\n          }\n        }\n        return ret;\n      }\n\n      if (!v.isObject(whitelist) || !v.isObject(attributes)) {\n        return {};\n      }\n\n      whitelist = buildObjectWhitelist(whitelist);\n      return cleanRecursive(attributes, whitelist);\n    },\n\n    exposeModule: function(validate, root, exports, module, define) {\n      if (exports) {\n        if (module && module.exports) {\n          exports = module.exports = validate;\n        }\n        exports.validate = validate;\n      } else {\n        root.validate = validate;\n        if (validate.isFunction(define) && define.amd) {\n          define([], function () { return validate; });\n        }\n      }\n    },\n\n    warn: function(msg) {\n      if (typeof console !== \"undefined\" && console.warn) {\n        console.warn(\"[validate.js] \" + msg);\n      }\n    },\n\n    error: function(msg) {\n      if (typeof console !== \"undefined\" && console.error) {\n        console.error(\"[validate.js] \" + msg);\n      }\n    }\n  });\n\n  validate.validators = {\n    // Presence validates that the value isn't empty\n    presence: function(value, options) {\n      options = v.extend({}, this.options, options);\n      if (options.allowEmpty !== false ? !v.isDefined(value) : v.isEmpty(value)) {\n        return options.message || this.message || \"can't be blank\";\n      }\n    },\n    length: function(value, options, attribute) {\n      // Empty values are allowed\n      if (!v.isDefined(value)) {\n        return;\n      }\n\n      options = v.extend({}, this.options, options);\n\n      var is = options.is\n        , maximum = options.maximum\n        , minimum = options.minimum\n        , tokenizer = options.tokenizer || function(val) { return val; }\n        , err\n        , errors = [];\n\n      value = tokenizer(value);\n      var length = value.length;\n      if(!v.isNumber(length)) {\n        v.error(v.format(\"Attribute %{attr} has a non numeric value for `length`\", {attr: attribute}));\n        return options.message || this.notValid || \"has an incorrect length\";\n      }\n\n      // Is checks\n      if (v.isNumber(is) && length !== is) {\n        err = options.wrongLength ||\n          this.wrongLength ||\n          \"is the wrong length (should be %{count} characters)\";\n        errors.push(v.format(err, {count: is}));\n      }\n\n      if (v.isNumber(minimum) && length < minimum) {\n        err = options.tooShort ||\n          this.tooShort ||\n          \"is too short (minimum is %{count} characters)\";\n        errors.push(v.format(err, {count: minimum}));\n      }\n\n      if (v.isNumber(maximum) && length > maximum) {\n        err = options.tooLong ||\n          this.tooLong ||\n          \"is too long (maximum is %{count} characters)\";\n        errors.push(v.format(err, {count: maximum}));\n      }\n\n      if (errors.length > 0) {\n        return options.message || errors;\n      }\n    },\n    numericality: function(value, options, attribute, attributes, globalOptions) {\n      // Empty values are fine\n      if (!v.isDefined(value)) {\n        return;\n      }\n\n      options = v.extend({}, this.options, options);\n\n      var errors = []\n        , name\n        , count\n        , checks = {\n            greaterThan:          function(v, c) { return v > c; },\n            greaterThanOrEqualTo: function(v, c) { return v >= c; },\n            equalTo:              function(v, c) { return v === c; },\n            lessThan:             function(v, c) { return v < c; },\n            lessThanOrEqualTo:    function(v, c) { return v <= c; },\n            divisibleBy:          function(v, c) { return v % c === 0; }\n          }\n        , prettify = options.prettify ||\n          (globalOptions && globalOptions.prettify) ||\n          v.prettify;\n\n      // Strict will check that it is a valid looking number\n      if (v.isString(value) && options.strict) {\n        var pattern = \"^-?(0|[1-9]\\\\d*)\";\n        if (!options.onlyInteger) {\n          pattern += \"(\\\\.\\\\d+)?\";\n        }\n        pattern += \"$\";\n\n        if (!(new RegExp(pattern).test(value))) {\n          return options.message ||\n            options.notValid ||\n            this.notValid ||\n            this.message ||\n            \"must be a valid number\";\n        }\n      }\n\n      // Coerce the value to a number unless we're being strict.\n      if (options.noStrings !== true && v.isString(value) && !v.isEmpty(value)) {\n        value = +value;\n      }\n\n      // If it's not a number we shouldn't continue since it will compare it.\n      if (!v.isNumber(value)) {\n        return options.message ||\n          options.notValid ||\n          this.notValid ||\n          this.message ||\n          \"is not a number\";\n      }\n\n      // Same logic as above, sort of. Don't bother with comparisons if this\n      // doesn't pass.\n      if (options.onlyInteger && !v.isInteger(value)) {\n        return options.message ||\n          options.notInteger ||\n          this.notInteger ||\n          this.message ||\n          \"must be an integer\";\n      }\n\n      for (name in checks) {\n        count = options[name];\n        if (v.isNumber(count) && !checks[name](value, count)) {\n          // This picks the default message if specified\n          // For example the greaterThan check uses the message from\n          // this.notGreaterThan so we capitalize the name and prepend \"not\"\n          var key = \"not\" + v.capitalize(name);\n          var msg = options[key] ||\n            this[key] ||\n            this.message ||\n            \"must be %{type} %{count}\";\n\n          errors.push(v.format(msg, {\n            count: count,\n            type: prettify(name)\n          }));\n        }\n      }\n\n      if (options.odd && value % 2 !== 1) {\n        errors.push(options.notOdd ||\n            this.notOdd ||\n            this.message ||\n            \"must be odd\");\n      }\n      if (options.even && value % 2 !== 0) {\n        errors.push(options.notEven ||\n            this.notEven ||\n            this.message ||\n            \"must be even\");\n      }\n\n      if (errors.length) {\n        return options.message || errors;\n      }\n    },\n    datetime: v.extend(function(value, options) {\n      if (!v.isFunction(this.parse) || !v.isFunction(this.format)) {\n        throw new Error(\"Both the parse and format functions needs to be set to use the datetime/date validator\");\n      }\n\n      // Empty values are fine\n      if (!v.isDefined(value)) {\n        return;\n      }\n\n      options = v.extend({}, this.options, options);\n\n      var err\n        , errors = []\n        , earliest = options.earliest ? this.parse(options.earliest, options) : NaN\n        , latest = options.latest ? this.parse(options.latest, options) : NaN;\n\n      value = this.parse(value, options);\n\n      // 86400000 is the number of milliseconds in a day, this is used to remove\n      // the time from the date\n      if (isNaN(value) || options.dateOnly && value % 86400000 !== 0) {\n        err = options.notValid ||\n          options.message ||\n          this.notValid ||\n          \"must be a valid date\";\n        return v.format(err, {value: arguments[0]});\n      }\n\n      if (!isNaN(earliest) && value < earliest) {\n        err = options.tooEarly ||\n          options.message ||\n          this.tooEarly ||\n          \"must be no earlier than %{date}\";\n        err = v.format(err, {\n          value: this.format(value, options),\n          date: this.format(earliest, options)\n        });\n        errors.push(err);\n      }\n\n      if (!isNaN(latest) && value > latest) {\n        err = options.tooLate ||\n          options.message ||\n          this.tooLate ||\n          \"must be no later than %{date}\";\n        err = v.format(err, {\n          date: this.format(latest, options),\n          value: this.format(value, options)\n        });\n        errors.push(err);\n      }\n\n      if (errors.length) {\n        return v.unique(errors);\n      }\n    }, {\n      parse: null,\n      format: null\n    }),\n    date: function(value, options) {\n      options = v.extend({}, options, {dateOnly: true});\n      return v.validators.datetime.call(v.validators.datetime, value, options);\n    },\n    format: function(value, options) {\n      if (v.isString(options) || (options instanceof RegExp)) {\n        options = {pattern: options};\n      }\n\n      options = v.extend({}, this.options, options);\n\n      var message = options.message || this.message || \"is invalid\"\n        , pattern = options.pattern\n        , match;\n\n      // Empty values are allowed\n      if (!v.isDefined(value)) {\n        return;\n      }\n      if (!v.isString(value)) {\n        return message;\n      }\n\n      if (v.isString(pattern)) {\n        pattern = new RegExp(options.pattern, options.flags);\n      }\n      match = pattern.exec(value);\n      if (!match || match[0].length != value.length) {\n        return message;\n      }\n    },\n    inclusion: function(value, options) {\n      // Empty values are fine\n      if (!v.isDefined(value)) {\n        return;\n      }\n      if (v.isArray(options)) {\n        options = {within: options};\n      }\n      options = v.extend({}, this.options, options);\n      if (v.contains(options.within, value)) {\n        return;\n      }\n      var message = options.message ||\n        this.message ||\n        \"^%{value} is not included in the list\";\n      return v.format(message, {value: value});\n    },\n    exclusion: function(value, options) {\n      // Empty values are fine\n      if (!v.isDefined(value)) {\n        return;\n      }\n      if (v.isArray(options)) {\n        options = {within: options};\n      }\n      options = v.extend({}, this.options, options);\n      if (!v.contains(options.within, value)) {\n        return;\n      }\n      var message = options.message || this.message || \"^%{value} is restricted\";\n      return v.format(message, {value: value});\n    },\n    email: v.extend(function(value, options) {\n      options = v.extend({}, this.options, options);\n      var message = options.message || this.message || \"is not a valid email\";\n      // Empty values are fine\n      if (!v.isDefined(value)) {\n        return;\n      }\n      if (!v.isString(value)) {\n        return message;\n      }\n      if (!this.PATTERN.exec(value)) {\n        return message;\n      }\n    }, {\n      PATTERN: /^[a-z0-9\\u007F-\\uffff!#$%&'*+\\/=?^_`{|}~-]+(?:\\.[a-z0-9\\u007F-\\uffff!#$%&'*+\\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z]{2,}$/i\n    }),\n    equality: function(value, options, attribute, attributes, globalOptions) {\n      if (!v.isDefined(value)) {\n        return;\n      }\n\n      if (v.isString(options)) {\n        options = {attribute: options};\n      }\n      options = v.extend({}, this.options, options);\n      var message = options.message ||\n        this.message ||\n        \"is not equal to %{attribute}\";\n\n      if (v.isEmpty(options.attribute) || !v.isString(options.attribute)) {\n        throw new Error(\"The attribute must be a non empty string\");\n      }\n\n      var otherValue = v.getDeepObjectValue(attributes, options.attribute)\n        , comparator = options.comparator || function(v1, v2) {\n          return v1 === v2;\n        }\n        , prettify = options.prettify ||\n          (globalOptions && globalOptions.prettify) ||\n          v.prettify;\n\n      if (!comparator(value, otherValue, options, attribute, attributes)) {\n        return v.format(message, {attribute: prettify(options.attribute)});\n      }\n    },\n\n    // A URL validator that is used to validate URLs with the ability to\n    // restrict schemes and some domains.\n    url: function(value, options) {\n      if (!v.isDefined(value)) {\n        return;\n      }\n\n      options = v.extend({}, this.options, options);\n\n      var message = options.message || this.message || \"is not a valid url\"\n        , schemes = options.schemes || this.schemes || ['http', 'https']\n        , allowLocal = options.allowLocal || this.allowLocal || false;\n\n      if (!v.isString(value)) {\n        return message;\n      }\n\n      // https://gist.github.com/dperini/729294\n      var regex =\n        \"^\" +\n        // protocol identifier\n        \"(?:(?:\" + schemes.join(\"|\") + \")://)\" +\n        // user:pass authentication\n        \"(?:\\\\S+(?::\\\\S*)?@)?\" +\n        \"(?:\";\n\n      var tld = \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\";\n\n      if (allowLocal) {\n        tld += \"?\";\n      } else {\n        regex +=\n          // IP address exclusion\n          // private & local networks\n          \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +\n          \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +\n          \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\";\n      }\n\n      regex +=\n          // IP address dotted notation octets\n          // excludes loopback network 0.0.0.0\n          // excludes reserved space >= 224.0.0.0\n          // excludes network & broacast addresses\n          // (first & last IP address of each class)\n          \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\n          \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\n          \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n        \"|\" +\n          // host name\n          \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\n          // domain name\n          \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\n          tld +\n        \")\" +\n        // port number\n        \"(?::\\\\d{2,5})?\" +\n        // resource path\n        \"(?:[/?#]\\\\S*)?\" +\n      \"$\";\n\n      var PATTERN = new RegExp(regex, 'i');\n      if (!PATTERN.exec(value)) {\n        return message;\n      }\n    }\n  };\n\n  validate.formatters = {\n    detailed: function(errors) {return errors;},\n    flat: v.flattenErrorsToArray,\n    grouped: function(errors) {\n      var attr;\n\n      errors = v.groupErrorsByAttribute(errors);\n      for (attr in errors) {\n        errors[attr] = v.flattenErrorsToArray(errors[attr]);\n      }\n      return errors;\n    },\n    constraint: function(errors) {\n      var attr;\n      errors = v.groupErrorsByAttribute(errors);\n      for (attr in errors) {\n        errors[attr] = errors[attr].map(function(result) {\n          return result.validator;\n        }).sort();\n      }\n      return errors;\n    }\n  };\n\n  validate.exposeModule(validate, this, exports, module, __webpack_require__(0));\n}).call(this,\n         true ? /* istanbul ignore next */ exports : null,\n         true ? /* istanbul ignore next */ module : null,\n        __webpack_require__(0));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)(module)))\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n/* globals __VUE_SSR_CONTEXT__ */\n\n// this module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return (_vm.errorMessageCollection && _vm.errorMessageCollection.length) ? _c('span', {\n    staticClass: \"error-message\"\n  }, [_vm._v(\"\\n    \" + _vm._s(_vm.errorMessageCollection[0]) + \"\\n\")]) : _vm._e()\n},staticRenderFns: []}\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// vue-validatejs.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9b38fc0c44bcaecffb44","module.exports = function() {\r\n\tthrow new Error(\"define cannot be used indirect\");\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/amd-define.js\n// module id = 0\n// module chunks = 0","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./vue-validate.js.vue\"),\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-415e9f98\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!./vue-validate.js.vue\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/vue-validate.js.vue\n// module id = 1\n// module chunks = 0","<template>\n  <span class=\"error-message\" v-if=\"errorMessageCollection && errorMessageCollection.length\">\n      {{errorMessageCollection[0]}}\n  </span>\n</template>\n<script>\n\nvar validate = require('validate.js');\n\nfunction reduceObject(property, input) \n{\n    var smallObject = {};\n    smallObject[property] = input[property];\n    return smallObject;\n}\n\nexport default \n{\n    props: ['propertyName', 'model', 'validation', 'validateConfig'],\n    created: function () \n    {\n        if(this.validateConfig) this.validateConfig();\n    },\n    computed: \n    {\n        errorMessageCollection ()\n        {\n            var fieldValidation = reduceObject(this.propertyName, this.validation);\n            return validate(this.model, fieldValidation, {format: 'flat'});\n        }\n    }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// vue-validate.js.vue?0a3a99e1","import VueValidateJs from './vue-validate.js.vue'\n\nexport { VueValidateJs }\n\nexport default VueValidateJs\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","/*!\n * validate.js 0.12.0\n *\n * (c) 2013-2017 Nicklas Ansman, 2013 Wrapp\n * Validate.js may be freely distributed under the MIT license.\n * For all details and documentation:\n * http://validatejs.org/\n */\n\n(function(exports, module, define) {\n  \"use strict\";\n\n  // The main function that calls the validators specified by the constraints.\n  // The options are the following:\n  //   - format (string) - An option that controls how the returned value is formatted\n  //     * flat - Returns a flat array of just the error messages\n  //     * grouped - Returns the messages grouped by attribute (default)\n  //     * detailed - Returns an array of the raw validation data\n  //   - fullMessages (boolean) - If `true` (default) the attribute name is prepended to the error.\n  //\n  // Please note that the options are also passed to each validator.\n  var validate = function(attributes, constraints, options) {\n    options = v.extend({}, v.options, options);\n\n    var results = v.runValidations(attributes, constraints, options)\n      , attr\n      , validator;\n\n    if (results.some(function(r) { return v.isPromise(r.error); })) {\n      throw new Error(\"Use validate.async if you want support for promises\");\n    }\n    return validate.processValidationResults(results, options);\n  };\n\n  var v = validate;\n\n  // Copies over attributes from one or more sources to a single destination.\n  // Very much similar to underscore's extend.\n  // The first argument is the target object and the remaining arguments will be\n  // used as sources.\n  v.extend = function(obj) {\n    [].slice.call(arguments, 1).forEach(function(source) {\n      for (var attr in source) {\n        obj[attr] = source[attr];\n      }\n    });\n    return obj;\n  };\n\n  v.extend(validate, {\n    // This is the version of the library as a semver.\n    // The toString function will allow it to be coerced into a string\n    version: {\n      major: 0,\n      minor: 12,\n      patch: 0,\n      metadata: null,\n      toString: function() {\n        var version = v.format(\"%{major}.%{minor}.%{patch}\", v.version);\n        if (!v.isEmpty(v.version.metadata)) {\n          version += \"+\" + v.version.metadata;\n        }\n        return version;\n      }\n    },\n\n    // Below is the dependencies that are used in validate.js\n\n    // The constructor of the Promise implementation.\n    // If you are using Q.js, RSVP or any other A+ compatible implementation\n    // override this attribute to be the constructor of that promise.\n    // Since jQuery promises aren't A+ compatible they won't work.\n    Promise: typeof Promise !== \"undefined\" ? Promise : /* istanbul ignore next */ null,\n\n    EMPTY_STRING_REGEXP: /^\\s*$/,\n\n    // Runs the validators specified by the constraints object.\n    // Will return an array of the format:\n    //     [{attribute: \"<attribute name>\", error: \"<validation result>\"}, ...]\n    runValidations: function(attributes, constraints, options) {\n      var results = []\n        , attr\n        , validatorName\n        , value\n        , validators\n        , validator\n        , validatorOptions\n        , error;\n\n      if (v.isDomElement(attributes) || v.isJqueryElement(attributes)) {\n        attributes = v.collectFormValues(attributes);\n      }\n\n      // Loops through each constraints, finds the correct validator and run it.\n      for (attr in constraints) {\n        value = v.getDeepObjectValue(attributes, attr);\n        // This allows the constraints for an attribute to be a function.\n        // The function will be called with the value, attribute name, the complete dict of\n        // attributes as well as the options and constraints passed in.\n        // This is useful when you want to have different\n        // validations depending on the attribute value.\n        validators = v.result(constraints[attr], value, attributes, attr, options, constraints);\n\n        for (validatorName in validators) {\n          validator = v.validators[validatorName];\n\n          if (!validator) {\n            error = v.format(\"Unknown validator %{name}\", {name: validatorName});\n            throw new Error(error);\n          }\n\n          validatorOptions = validators[validatorName];\n          // This allows the options to be a function. The function will be\n          // called with the value, attribute name, the complete dict of\n          // attributes as well as the options and constraints passed in.\n          // This is useful when you want to have different\n          // validations depending on the attribute value.\n          validatorOptions = v.result(validatorOptions, value, attributes, attr, options, constraints);\n          if (!validatorOptions) {\n            continue;\n          }\n          results.push({\n            attribute: attr,\n            value: value,\n            validator: validatorName,\n            globalOptions: options,\n            attributes: attributes,\n            options: validatorOptions,\n            error: validator.call(validator,\n                value,\n                validatorOptions,\n                attr,\n                attributes,\n                options)\n          });\n        }\n      }\n\n      return results;\n    },\n\n    // Takes the output from runValidations and converts it to the correct\n    // output format.\n    processValidationResults: function(errors, options) {\n      errors = v.pruneEmptyErrors(errors, options);\n      errors = v.expandMultipleErrors(errors, options);\n      errors = v.convertErrorMessages(errors, options);\n\n      var format = options.format || \"grouped\";\n\n      if (typeof v.formatters[format] === 'function') {\n        errors = v.formatters[format](errors);\n      } else {\n        throw new Error(v.format(\"Unknown format %{format}\", options));\n      }\n\n      return v.isEmpty(errors) ? undefined : errors;\n    },\n\n    // Runs the validations with support for promises.\n    // This function will return a promise that is settled when all the\n    // validation promises have been completed.\n    // It can be called even if no validations returned a promise.\n    async: function(attributes, constraints, options) {\n      options = v.extend({}, v.async.options, options);\n\n      var WrapErrors = options.wrapErrors || function(errors) {\n        return errors;\n      };\n\n      // Removes unknown attributes\n      if (options.cleanAttributes !== false) {\n        attributes = v.cleanAttributes(attributes, constraints);\n      }\n\n      var results = v.runValidations(attributes, constraints, options);\n\n      return new v.Promise(function(resolve, reject) {\n        v.waitForResults(results).then(function() {\n          var errors = v.processValidationResults(results, options);\n          if (errors) {\n            reject(new WrapErrors(errors, options, attributes, constraints));\n          } else {\n            resolve(attributes);\n          }\n        }, function(err) {\n          reject(err);\n        });\n      });\n    },\n\n    single: function(value, constraints, options) {\n      options = v.extend({}, v.single.options, options, {\n        format: \"flat\",\n        fullMessages: false\n      });\n      return v({single: value}, {single: constraints}, options);\n    },\n\n    // Returns a promise that is resolved when all promises in the results array\n    // are settled. The promise returned from this function is always resolved,\n    // never rejected.\n    // This function modifies the input argument, it replaces the promises\n    // with the value returned from the promise.\n    waitForResults: function(results) {\n      // Create a sequence of all the results starting with a resolved promise.\n      return results.reduce(function(memo, result) {\n        // If this result isn't a promise skip it in the sequence.\n        if (!v.isPromise(result.error)) {\n          return memo;\n        }\n\n        return memo.then(function() {\n          return result.error.then(function(error) {\n            result.error = error || null;\n          });\n        });\n      }, new v.Promise(function(r) { r(); })); // A resolved promise\n    },\n\n    // If the given argument is a call: function the and: function return the value\n    // otherwise just return the value. Additional arguments will be passed as\n    // arguments to the function.\n    // Example:\n    // ```\n    // result('foo') // 'foo'\n    // result(Math.max, 1, 2) // 2\n    // ```\n    result: function(value) {\n      var args = [].slice.call(arguments, 1);\n      if (typeof value === 'function') {\n        value = value.apply(null, args);\n      }\n      return value;\n    },\n\n    // Checks if the value is a number. This function does not consider NaN a\n    // number like many other `isNumber` functions do.\n    isNumber: function(value) {\n      return typeof value === 'number' && !isNaN(value);\n    },\n\n    // Returns false if the object is not a function\n    isFunction: function(value) {\n      return typeof value === 'function';\n    },\n\n    // A simple check to verify that the value is an integer. Uses `isNumber`\n    // and a simple modulo check.\n    isInteger: function(value) {\n      return v.isNumber(value) && value % 1 === 0;\n    },\n\n    // Checks if the value is a boolean\n    isBoolean: function(value) {\n      return typeof value === 'boolean';\n    },\n\n    // Uses the `Object` function to check if the given argument is an object.\n    isObject: function(obj) {\n      return obj === Object(obj);\n    },\n\n    // Simply checks if the object is an instance of a date\n    isDate: function(obj) {\n      return obj instanceof Date;\n    },\n\n    // Returns false if the object is `null` of `undefined`\n    isDefined: function(obj) {\n      return obj !== null && obj !== undefined;\n    },\n\n    // Checks if the given argument is a promise. Anything with a `then`\n    // function is considered a promise.\n    isPromise: function(p) {\n      return !!p && v.isFunction(p.then);\n    },\n\n    isJqueryElement: function(o) {\n      return o && v.isString(o.jquery);\n    },\n\n    isDomElement: function(o) {\n      if (!o) {\n        return false;\n      }\n\n      if (!o.querySelectorAll || !o.querySelector) {\n        return false;\n      }\n\n      if (v.isObject(document) && o === document) {\n        return true;\n      }\n\n      // http://stackoverflow.com/a/384380/699304\n      /* istanbul ignore else */\n      if (typeof HTMLElement === \"object\") {\n        return o instanceof HTMLElement;\n      } else {\n        return o &&\n          typeof o === \"object\" &&\n          o !== null &&\n          o.nodeType === 1 &&\n          typeof o.nodeName === \"string\";\n      }\n    },\n\n    isEmpty: function(value) {\n      var attr;\n\n      // Null and undefined are empty\n      if (!v.isDefined(value)) {\n        return true;\n      }\n\n      // functions are non empty\n      if (v.isFunction(value)) {\n        return false;\n      }\n\n      // Whitespace only strings are empty\n      if (v.isString(value)) {\n        return v.EMPTY_STRING_REGEXP.test(value);\n      }\n\n      // For arrays we use the length property\n      if (v.isArray(value)) {\n        return value.length === 0;\n      }\n\n      // Dates have no attributes but aren't empty\n      if (v.isDate(value)) {\n        return false;\n      }\n\n      // If we find at least one property we consider it non empty\n      if (v.isObject(value)) {\n        for (attr in value) {\n          return false;\n        }\n        return true;\n      }\n\n      return false;\n    },\n\n    // Formats the specified strings with the given values like so:\n    // ```\n    // format(\"Foo: %{foo}\", {foo: \"bar\"}) // \"Foo bar\"\n    // ```\n    // If you want to write %{...} without having it replaced simply\n    // prefix it with % like this `Foo: %%{foo}` and it will be returned\n    // as `\"Foo: %{foo}\"`\n    format: v.extend(function(str, vals) {\n      if (!v.isString(str)) {\n        return str;\n      }\n      return str.replace(v.format.FORMAT_REGEXP, function(m0, m1, m2) {\n        if (m1 === '%') {\n          return \"%{\" + m2 + \"}\";\n        } else {\n          return String(vals[m2]);\n        }\n      });\n    }, {\n      // Finds %{key} style patterns in the given string\n      FORMAT_REGEXP: /(%?)%\\{([^\\}]+)\\}/g\n    }),\n\n    // \"Prettifies\" the given string.\n    // Prettifying means replacing [.\\_-] with spaces as well as splitting\n    // camel case words.\n    prettify: function(str) {\n      if (v.isNumber(str)) {\n        // If there are more than 2 decimals round it to two\n        if ((str * 100) % 1 === 0) {\n          return \"\" + str;\n        } else {\n          return parseFloat(Math.round(str * 100) / 100).toFixed(2);\n        }\n      }\n\n      if (v.isArray(str)) {\n        return str.map(function(s) { return v.prettify(s); }).join(\", \");\n      }\n\n      if (v.isObject(str)) {\n        return str.toString();\n      }\n\n      // Ensure the string is actually a string\n      str = \"\" + str;\n\n      return str\n        // Splits keys separated by periods\n        .replace(/([^\\s])\\.([^\\s])/g, '$1 $2')\n        // Removes backslashes\n        .replace(/\\\\+/g, '')\n        // Replaces - and - with space\n        .replace(/[_-]/g, ' ')\n        // Splits camel cased words\n        .replace(/([a-z])([A-Z])/g, function(m0, m1, m2) {\n          return \"\" + m1 + \" \" + m2.toLowerCase();\n        })\n        .toLowerCase();\n    },\n\n    stringifyValue: function(value, options) {\n      var prettify = options && options.prettify || v.prettify;\n      return prettify(value);\n    },\n\n    isString: function(value) {\n      return typeof value === 'string';\n    },\n\n    isArray: function(value) {\n      return {}.toString.call(value) === '[object Array]';\n    },\n\n    // Checks if the object is a hash, which is equivalent to an object that\n    // is neither an array nor a function.\n    isHash: function(value) {\n      return v.isObject(value) && !v.isArray(value) && !v.isFunction(value);\n    },\n\n    contains: function(obj, value) {\n      if (!v.isDefined(obj)) {\n        return false;\n      }\n      if (v.isArray(obj)) {\n        return obj.indexOf(value) !== -1;\n      }\n      return value in obj;\n    },\n\n    unique: function(array) {\n      if (!v.isArray(array)) {\n        return array;\n      }\n      return array.filter(function(el, index, array) {\n        return array.indexOf(el) == index;\n      });\n    },\n\n    forEachKeyInKeypath: function(object, keypath, callback) {\n      if (!v.isString(keypath)) {\n        return undefined;\n      }\n\n      var key = \"\"\n        , i\n        , escape = false;\n\n      for (i = 0; i < keypath.length; ++i) {\n        switch (keypath[i]) {\n          case '.':\n            if (escape) {\n              escape = false;\n              key += '.';\n            } else {\n              object = callback(object, key, false);\n              key = \"\";\n            }\n            break;\n\n          case '\\\\':\n            if (escape) {\n              escape = false;\n              key += '\\\\';\n            } else {\n              escape = true;\n            }\n            break;\n\n          default:\n            escape = false;\n            key += keypath[i];\n            break;\n        }\n      }\n\n      return callback(object, key, true);\n    },\n\n    getDeepObjectValue: function(obj, keypath) {\n      if (!v.isObject(obj)) {\n        return undefined;\n      }\n\n      return v.forEachKeyInKeypath(obj, keypath, function(obj, key) {\n        if (v.isObject(obj)) {\n          return obj[key];\n        }\n      });\n    },\n\n    // This returns an object with all the values of the form.\n    // It uses the input name as key and the value as value\n    // So for example this:\n    // <input type=\"text\" name=\"email\" value=\"foo@bar.com\" />\n    // would return:\n    // {email: \"foo@bar.com\"}\n    collectFormValues: function(form, options) {\n      var values = {}\n        , i\n        , j\n        , input\n        , inputs\n        , option\n        , value;\n\n      if (v.isJqueryElement(form)) {\n        form = form[0];\n      }\n\n      if (!form) {\n        return values;\n      }\n\n      options = options || {};\n\n      inputs = form.querySelectorAll(\"input[name], textarea[name]\");\n      for (i = 0; i < inputs.length; ++i) {\n        input = inputs.item(i);\n\n        if (v.isDefined(input.getAttribute(\"data-ignored\"))) {\n          continue;\n        }\n\n        name = input.name.replace(/\\./g, \"\\\\\\\\.\");\n        value = v.sanitizeFormValue(input.value, options);\n        if (input.type === \"number\") {\n          value = value ? +value : null;\n        } else if (input.type === \"checkbox\") {\n          if (input.attributes.value) {\n            if (!input.checked) {\n              value = values[name] || null;\n            }\n          } else {\n            value = input.checked;\n          }\n        } else if (input.type === \"radio\") {\n          if (!input.checked) {\n            value = values[name] || null;\n          }\n        }\n        values[name] = value;\n      }\n\n      inputs = form.querySelectorAll(\"select[name]\");\n      for (i = 0; i < inputs.length; ++i) {\n        input = inputs.item(i);\n        if (v.isDefined(input.getAttribute(\"data-ignored\"))) {\n          continue;\n        }\n\n        if (input.multiple) {\n          value = [];\n          for (j in input.options) {\n            option = input.options[j];\n             if (option && option.selected) {\n              value.push(v.sanitizeFormValue(option.value, options));\n            }\n          }\n        } else {\n          var _val = typeof input.options[input.selectedIndex] !== 'undefined' ? input.options[input.selectedIndex].value : '';\n          value = v.sanitizeFormValue(_val, options);\n        }\n        values[input.name] = value;\n      }\n\n      return values;\n    },\n\n    sanitizeFormValue: function(value, options) {\n      if (options.trim && v.isString(value)) {\n        value = value.trim();\n      }\n\n      if (options.nullify !== false && value === \"\") {\n        return null;\n      }\n      return value;\n    },\n\n    capitalize: function(str) {\n      if (!v.isString(str)) {\n        return str;\n      }\n      return str[0].toUpperCase() + str.slice(1);\n    },\n\n    // Remove all errors who's error attribute is empty (null or undefined)\n    pruneEmptyErrors: function(errors) {\n      return errors.filter(function(error) {\n        return !v.isEmpty(error.error);\n      });\n    },\n\n    // In\n    // [{error: [\"err1\", \"err2\"], ...}]\n    // Out\n    // [{error: \"err1\", ...}, {error: \"err2\", ...}]\n    //\n    // All attributes in an error with multiple messages are duplicated\n    // when expanding the errors.\n    expandMultipleErrors: function(errors) {\n      var ret = [];\n      errors.forEach(function(error) {\n        // Removes errors without a message\n        if (v.isArray(error.error)) {\n          error.error.forEach(function(msg) {\n            ret.push(v.extend({}, error, {error: msg}));\n          });\n        } else {\n          ret.push(error);\n        }\n      });\n      return ret;\n    },\n\n    // Converts the error mesages by prepending the attribute name unless the\n    // message is prefixed by ^\n    convertErrorMessages: function(errors, options) {\n      options = options || {};\n\n      var ret = []\n        , prettify = options.prettify || v.prettify;\n      errors.forEach(function(errorInfo) {\n        var error = v.result(errorInfo.error,\n            errorInfo.value,\n            errorInfo.attribute,\n            errorInfo.options,\n            errorInfo.attributes,\n            errorInfo.globalOptions);\n\n        if (!v.isString(error)) {\n          ret.push(errorInfo);\n          return;\n        }\n\n        if (error[0] === '^') {\n          error = error.slice(1);\n        } else if (options.fullMessages !== false) {\n          error = v.capitalize(prettify(errorInfo.attribute)) + \" \" + error;\n        }\n        error = error.replace(/\\\\\\^/g, \"^\");\n        error = v.format(error, {\n          value: v.stringifyValue(errorInfo.value, options)\n        });\n        ret.push(v.extend({}, errorInfo, {error: error}));\n      });\n      return ret;\n    },\n\n    // In:\n    // [{attribute: \"<attributeName>\", ...}]\n    // Out:\n    // {\"<attributeName>\": [{attribute: \"<attributeName>\", ...}]}\n    groupErrorsByAttribute: function(errors) {\n      var ret = {};\n      errors.forEach(function(error) {\n        var list = ret[error.attribute];\n        if (list) {\n          list.push(error);\n        } else {\n          ret[error.attribute] = [error];\n        }\n      });\n      return ret;\n    },\n\n    // In:\n    // [{error: \"<message 1>\", ...}, {error: \"<message 2>\", ...}]\n    // Out:\n    // [\"<message 1>\", \"<message 2>\"]\n    flattenErrorsToArray: function(errors) {\n      return errors\n        .map(function(error) { return error.error; })\n        .filter(function(value, index, self) {\n          return self.indexOf(value) === index;\n        });\n    },\n\n    cleanAttributes: function(attributes, whitelist) {\n      function whitelistCreator(obj, key, last) {\n        if (v.isObject(obj[key])) {\n          return obj[key];\n        }\n        return (obj[key] = last ? true : {});\n      }\n\n      function buildObjectWhitelist(whitelist) {\n        var ow = {}\n          , lastObject\n          , attr;\n        for (attr in whitelist) {\n          if (!whitelist[attr]) {\n            continue;\n          }\n          v.forEachKeyInKeypath(ow, attr, whitelistCreator);\n        }\n        return ow;\n      }\n\n      function cleanRecursive(attributes, whitelist) {\n        if (!v.isObject(attributes)) {\n          return attributes;\n        }\n\n        var ret = v.extend({}, attributes)\n          , w\n          , attribute;\n\n        for (attribute in attributes) {\n          w = whitelist[attribute];\n\n          if (v.isObject(w)) {\n            ret[attribute] = cleanRecursive(ret[attribute], w);\n          } else if (!w) {\n            delete ret[attribute];\n          }\n        }\n        return ret;\n      }\n\n      if (!v.isObject(whitelist) || !v.isObject(attributes)) {\n        return {};\n      }\n\n      whitelist = buildObjectWhitelist(whitelist);\n      return cleanRecursive(attributes, whitelist);\n    },\n\n    exposeModule: function(validate, root, exports, module, define) {\n      if (exports) {\n        if (module && module.exports) {\n          exports = module.exports = validate;\n        }\n        exports.validate = validate;\n      } else {\n        root.validate = validate;\n        if (validate.isFunction(define) && define.amd) {\n          define([], function () { return validate; });\n        }\n      }\n    },\n\n    warn: function(msg) {\n      if (typeof console !== \"undefined\" && console.warn) {\n        console.warn(\"[validate.js] \" + msg);\n      }\n    },\n\n    error: function(msg) {\n      if (typeof console !== \"undefined\" && console.error) {\n        console.error(\"[validate.js] \" + msg);\n      }\n    }\n  });\n\n  validate.validators = {\n    // Presence validates that the value isn't empty\n    presence: function(value, options) {\n      options = v.extend({}, this.options, options);\n      if (options.allowEmpty !== false ? !v.isDefined(value) : v.isEmpty(value)) {\n        return options.message || this.message || \"can't be blank\";\n      }\n    },\n    length: function(value, options, attribute) {\n      // Empty values are allowed\n      if (!v.isDefined(value)) {\n        return;\n      }\n\n      options = v.extend({}, this.options, options);\n\n      var is = options.is\n        , maximum = options.maximum\n        , minimum = options.minimum\n        , tokenizer = options.tokenizer || function(val) { return val; }\n        , err\n        , errors = [];\n\n      value = tokenizer(value);\n      var length = value.length;\n      if(!v.isNumber(length)) {\n        v.error(v.format(\"Attribute %{attr} has a non numeric value for `length`\", {attr: attribute}));\n        return options.message || this.notValid || \"has an incorrect length\";\n      }\n\n      // Is checks\n      if (v.isNumber(is) && length !== is) {\n        err = options.wrongLength ||\n          this.wrongLength ||\n          \"is the wrong length (should be %{count} characters)\";\n        errors.push(v.format(err, {count: is}));\n      }\n\n      if (v.isNumber(minimum) && length < minimum) {\n        err = options.tooShort ||\n          this.tooShort ||\n          \"is too short (minimum is %{count} characters)\";\n        errors.push(v.format(err, {count: minimum}));\n      }\n\n      if (v.isNumber(maximum) && length > maximum) {\n        err = options.tooLong ||\n          this.tooLong ||\n          \"is too long (maximum is %{count} characters)\";\n        errors.push(v.format(err, {count: maximum}));\n      }\n\n      if (errors.length > 0) {\n        return options.message || errors;\n      }\n    },\n    numericality: function(value, options, attribute, attributes, globalOptions) {\n      // Empty values are fine\n      if (!v.isDefined(value)) {\n        return;\n      }\n\n      options = v.extend({}, this.options, options);\n\n      var errors = []\n        , name\n        , count\n        , checks = {\n            greaterThan:          function(v, c) { return v > c; },\n            greaterThanOrEqualTo: function(v, c) { return v >= c; },\n            equalTo:              function(v, c) { return v === c; },\n            lessThan:             function(v, c) { return v < c; },\n            lessThanOrEqualTo:    function(v, c) { return v <= c; },\n            divisibleBy:          function(v, c) { return v % c === 0; }\n          }\n        , prettify = options.prettify ||\n          (globalOptions && globalOptions.prettify) ||\n          v.prettify;\n\n      // Strict will check that it is a valid looking number\n      if (v.isString(value) && options.strict) {\n        var pattern = \"^-?(0|[1-9]\\\\d*)\";\n        if (!options.onlyInteger) {\n          pattern += \"(\\\\.\\\\d+)?\";\n        }\n        pattern += \"$\";\n\n        if (!(new RegExp(pattern).test(value))) {\n          return options.message ||\n            options.notValid ||\n            this.notValid ||\n            this.message ||\n            \"must be a valid number\";\n        }\n      }\n\n      // Coerce the value to a number unless we're being strict.\n      if (options.noStrings !== true && v.isString(value) && !v.isEmpty(value)) {\n        value = +value;\n      }\n\n      // If it's not a number we shouldn't continue since it will compare it.\n      if (!v.isNumber(value)) {\n        return options.message ||\n          options.notValid ||\n          this.notValid ||\n          this.message ||\n          \"is not a number\";\n      }\n\n      // Same logic as above, sort of. Don't bother with comparisons if this\n      // doesn't pass.\n      if (options.onlyInteger && !v.isInteger(value)) {\n        return options.message ||\n          options.notInteger ||\n          this.notInteger ||\n          this.message ||\n          \"must be an integer\";\n      }\n\n      for (name in checks) {\n        count = options[name];\n        if (v.isNumber(count) && !checks[name](value, count)) {\n          // This picks the default message if specified\n          // For example the greaterThan check uses the message from\n          // this.notGreaterThan so we capitalize the name and prepend \"not\"\n          var key = \"not\" + v.capitalize(name);\n          var msg = options[key] ||\n            this[key] ||\n            this.message ||\n            \"must be %{type} %{count}\";\n\n          errors.push(v.format(msg, {\n            count: count,\n            type: prettify(name)\n          }));\n        }\n      }\n\n      if (options.odd && value % 2 !== 1) {\n        errors.push(options.notOdd ||\n            this.notOdd ||\n            this.message ||\n            \"must be odd\");\n      }\n      if (options.even && value % 2 !== 0) {\n        errors.push(options.notEven ||\n            this.notEven ||\n            this.message ||\n            \"must be even\");\n      }\n\n      if (errors.length) {\n        return options.message || errors;\n      }\n    },\n    datetime: v.extend(function(value, options) {\n      if (!v.isFunction(this.parse) || !v.isFunction(this.format)) {\n        throw new Error(\"Both the parse and format functions needs to be set to use the datetime/date validator\");\n      }\n\n      // Empty values are fine\n      if (!v.isDefined(value)) {\n        return;\n      }\n\n      options = v.extend({}, this.options, options);\n\n      var err\n        , errors = []\n        , earliest = options.earliest ? this.parse(options.earliest, options) : NaN\n        , latest = options.latest ? this.parse(options.latest, options) : NaN;\n\n      value = this.parse(value, options);\n\n      // 86400000 is the number of milliseconds in a day, this is used to remove\n      // the time from the date\n      if (isNaN(value) || options.dateOnly && value % 86400000 !== 0) {\n        err = options.notValid ||\n          options.message ||\n          this.notValid ||\n          \"must be a valid date\";\n        return v.format(err, {value: arguments[0]});\n      }\n\n      if (!isNaN(earliest) && value < earliest) {\n        err = options.tooEarly ||\n          options.message ||\n          this.tooEarly ||\n          \"must be no earlier than %{date}\";\n        err = v.format(err, {\n          value: this.format(value, options),\n          date: this.format(earliest, options)\n        });\n        errors.push(err);\n      }\n\n      if (!isNaN(latest) && value > latest) {\n        err = options.tooLate ||\n          options.message ||\n          this.tooLate ||\n          \"must be no later than %{date}\";\n        err = v.format(err, {\n          date: this.format(latest, options),\n          value: this.format(value, options)\n        });\n        errors.push(err);\n      }\n\n      if (errors.length) {\n        return v.unique(errors);\n      }\n    }, {\n      parse: null,\n      format: null\n    }),\n    date: function(value, options) {\n      options = v.extend({}, options, {dateOnly: true});\n      return v.validators.datetime.call(v.validators.datetime, value, options);\n    },\n    format: function(value, options) {\n      if (v.isString(options) || (options instanceof RegExp)) {\n        options = {pattern: options};\n      }\n\n      options = v.extend({}, this.options, options);\n\n      var message = options.message || this.message || \"is invalid\"\n        , pattern = options.pattern\n        , match;\n\n      // Empty values are allowed\n      if (!v.isDefined(value)) {\n        return;\n      }\n      if (!v.isString(value)) {\n        return message;\n      }\n\n      if (v.isString(pattern)) {\n        pattern = new RegExp(options.pattern, options.flags);\n      }\n      match = pattern.exec(value);\n      if (!match || match[0].length != value.length) {\n        return message;\n      }\n    },\n    inclusion: function(value, options) {\n      // Empty values are fine\n      if (!v.isDefined(value)) {\n        return;\n      }\n      if (v.isArray(options)) {\n        options = {within: options};\n      }\n      options = v.extend({}, this.options, options);\n      if (v.contains(options.within, value)) {\n        return;\n      }\n      var message = options.message ||\n        this.message ||\n        \"^%{value} is not included in the list\";\n      return v.format(message, {value: value});\n    },\n    exclusion: function(value, options) {\n      // Empty values are fine\n      if (!v.isDefined(value)) {\n        return;\n      }\n      if (v.isArray(options)) {\n        options = {within: options};\n      }\n      options = v.extend({}, this.options, options);\n      if (!v.contains(options.within, value)) {\n        return;\n      }\n      var message = options.message || this.message || \"^%{value} is restricted\";\n      return v.format(message, {value: value});\n    },\n    email: v.extend(function(value, options) {\n      options = v.extend({}, this.options, options);\n      var message = options.message || this.message || \"is not a valid email\";\n      // Empty values are fine\n      if (!v.isDefined(value)) {\n        return;\n      }\n      if (!v.isString(value)) {\n        return message;\n      }\n      if (!this.PATTERN.exec(value)) {\n        return message;\n      }\n    }, {\n      PATTERN: /^[a-z0-9\\u007F-\\uffff!#$%&'*+\\/=?^_`{|}~-]+(?:\\.[a-z0-9\\u007F-\\uffff!#$%&'*+\\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z]{2,}$/i\n    }),\n    equality: function(value, options, attribute, attributes, globalOptions) {\n      if (!v.isDefined(value)) {\n        return;\n      }\n\n      if (v.isString(options)) {\n        options = {attribute: options};\n      }\n      options = v.extend({}, this.options, options);\n      var message = options.message ||\n        this.message ||\n        \"is not equal to %{attribute}\";\n\n      if (v.isEmpty(options.attribute) || !v.isString(options.attribute)) {\n        throw new Error(\"The attribute must be a non empty string\");\n      }\n\n      var otherValue = v.getDeepObjectValue(attributes, options.attribute)\n        , comparator = options.comparator || function(v1, v2) {\n          return v1 === v2;\n        }\n        , prettify = options.prettify ||\n          (globalOptions && globalOptions.prettify) ||\n          v.prettify;\n\n      if (!comparator(value, otherValue, options, attribute, attributes)) {\n        return v.format(message, {attribute: prettify(options.attribute)});\n      }\n    },\n\n    // A URL validator that is used to validate URLs with the ability to\n    // restrict schemes and some domains.\n    url: function(value, options) {\n      if (!v.isDefined(value)) {\n        return;\n      }\n\n      options = v.extend({}, this.options, options);\n\n      var message = options.message || this.message || \"is not a valid url\"\n        , schemes = options.schemes || this.schemes || ['http', 'https']\n        , allowLocal = options.allowLocal || this.allowLocal || false;\n\n      if (!v.isString(value)) {\n        return message;\n      }\n\n      // https://gist.github.com/dperini/729294\n      var regex =\n        \"^\" +\n        // protocol identifier\n        \"(?:(?:\" + schemes.join(\"|\") + \")://)\" +\n        // user:pass authentication\n        \"(?:\\\\S+(?::\\\\S*)?@)?\" +\n        \"(?:\";\n\n      var tld = \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\";\n\n      if (allowLocal) {\n        tld += \"?\";\n      } else {\n        regex +=\n          // IP address exclusion\n          // private & local networks\n          \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +\n          \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +\n          \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\";\n      }\n\n      regex +=\n          // IP address dotted notation octets\n          // excludes loopback network 0.0.0.0\n          // excludes reserved space >= 224.0.0.0\n          // excludes network & broacast addresses\n          // (first & last IP address of each class)\n          \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\n          \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\n          \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n        \"|\" +\n          // host name\n          \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\n          // domain name\n          \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\n          tld +\n        \")\" +\n        // port number\n        \"(?::\\\\d{2,5})?\" +\n        // resource path\n        \"(?:[/?#]\\\\S*)?\" +\n      \"$\";\n\n      var PATTERN = new RegExp(regex, 'i');\n      if (!PATTERN.exec(value)) {\n        return message;\n      }\n    }\n  };\n\n  validate.formatters = {\n    detailed: function(errors) {return errors;},\n    flat: v.flattenErrorsToArray,\n    grouped: function(errors) {\n      var attr;\n\n      errors = v.groupErrorsByAttribute(errors);\n      for (attr in errors) {\n        errors[attr] = v.flattenErrorsToArray(errors[attr]);\n      }\n      return errors;\n    },\n    constraint: function(errors) {\n      var attr;\n      errors = v.groupErrorsByAttribute(errors);\n      for (attr in errors) {\n        errors[attr] = errors[attr].map(function(result) {\n          return result.validator;\n        }).sort();\n      }\n      return errors;\n    }\n  };\n\n  validate.exposeModule(validate, this, exports, module, define);\n}).call(this,\n        typeof exports !== 'undefined' ? /* istanbul ignore next */ exports : null,\n        typeof module !== 'undefined' ? /* istanbul ignore next */ module : null,\n        typeof define !== 'undefined' ? /* istanbul ignore next */ define : null);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/validate.js/validate.js\n// module id = 4\n// module chunks = 0","/* globals __VUE_SSR_CONTEXT__ */\n\n// this module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/component-normalizer.js\n// module id = 5\n// module chunks = 0","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return (_vm.errorMessageCollection && _vm.errorMessageCollection.length) ? _c('span', {\n    staticClass: \"error-message\"\n  }, [_vm._v(\"\\n    \" + _vm._s(_vm.errorMessageCollection[0]) + \"\\n\")]) : _vm._e()\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-415e9f98\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/vue-validate.js.vue\n// module id = 6\n// module chunks = 0","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}